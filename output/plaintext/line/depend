output/plaintext/line/line$(OBJ_SUFFIX): output/plaintext/line/line.c \
 output/plaintext/line/line.h pypipe.h pyoutput.h stipulation/branch.h \
 output/plaintext/end_of_phase_writer.h solving/trivial_end_filter.h \
 output/plaintext/move_inversion_counter.h \
 output/plaintext/illegal_selfcheck_writer.h \
 output/plaintext/line/line_writer.h \
 output/plaintext/line/end_of_intro_series_marker.h trace.h

output/plaintext/line/line.h:

pypipe.h:

pyoutput.h:

stipulation/branch.h:

output/plaintext/end_of_phase_writer.h:

solving/trivial_end_filter.h:

output/plaintext/move_inversion_counter.h:

output/plaintext/illegal_selfcheck_writer.h:

output/plaintext/line/line_writer.h:

output/plaintext/line/end_of_intro_series_marker.h:

trace.h:
output/plaintext/line/line_writer$(OBJ_SUFFIX): output/plaintext/line/line_writer.c \
 output/plaintext/line/line_writer.h pypipe.h pydata.h pyoutput.h trace.h \
 pymsg.h stipulation/battle_play/defense_play.h \
 output/plaintext/plaintext.h output/plaintext/move_inversion_counter.h \
 output/plaintext/line/end_of_intro_series_marker.h platform/beep.h

output/plaintext/line/line_writer.h:

pypipe.h:

pydata.h:

pyoutput.h:

trace.h:

pymsg.h:

stipulation/battle_play/defense_play.h:

output/plaintext/plaintext.h:

output/plaintext/move_inversion_counter.h:

output/plaintext/line/end_of_intro_series_marker.h:

platform/beep.h:
output/plaintext/line/end_of_intro_series_marker$(OBJ_SUFFIX): \
 output/plaintext/line/end_of_intro_series_marker.c \
 output/plaintext/line/end_of_intro_series_marker.h pydata.h pypipe.h \
 trace.h

output/plaintext/line/end_of_intro_series_marker.h:

pydata.h:

pypipe.h:

trace.h:
