# -*- Makefile -*-
#
# Common Popeye source and generated files
# ========================================

INCLUDES = pydata.h \
		py.h py1.h py6.h pyproc.h pymsg.h \
		pylang.h pyproof.h
SRC_CFILES =	pydata.c \
		py1.c py6.c pyio.c \
		pymsg.c pylang.c pyproof.c	       \
		gengmarr.c
GENERATED_CFILES = pygmarr.c
ALLCFILES  =    $(SRC_CFILES) $(GENERATED_CFILES) DHT/*.c
MSGFILES=       py-fran.msg py-deut.msg py-engl.msg genpystr.c
DOCFILES=       py-fran.txt py-deut.txt py-engl.txt \
		readme.txt COPIER COPYING KOPIEREN
DEVELOP =       coding.txt
SCRIPTS =       $(wildcard scripts/*.sh)
SPECIALCFILES = pymain.c
HOSTFILES     = genpystr$(OBJ_SUFFIX) \
		pylang-host$(OBJ_SUFFIX) position/position-host$(OBJ_SUFFIX) \
		position/board-host$(OBJ_SUFFIX) \
		gengmarr$(EXE_SUFFIX) genpystr$(EXE_SUFFIX)

include makefile.rules $(CURRPWD)/depend

DISTRIBUTEDFILES += $(SPECIALCFILES) $(DEVELOP) $(DOCFILES) $(MSGFILES)



# ===========================================================
# Target for compiling .c source files into object files

pyio:           pyio.c pydata.h py.h pydata$(OBJ_SUFFIX) pymac.h
		$(CCTARGET) $(DEFINEMACRO)STANDALONE $(CFLAGS) \
			$(EXEFILE)pyio pydata$(OBJ_SUFFIX) pyio.c

# pylang.c is compiled both for the host and the target.
# pylang-host$(OBJ_SUFFIX) is the object file for the host.
pylang-host$(OBJ_SUFFIX):  pylang.c
		$(CCHOST) $(CFLAGS) $(COMPILEONLY) pylang.c $(OBJFILE)$@
# work around compilers that strictly derive object file name from
# source file name
		@if [ 0 -eq $(OBJFILE_WORKS) ]; then \
			mv pylang$(OBJ_SUFFIX) $@; \
		fi

genpystr$(OBJ_SUFFIX):	genpystr.c
			$(CCHOST) $(CFLAGS) \
				$(COMPILEONLY) genpystr.c $(OBJFILE)$@


# ===========================================================
# Target for generating utilities for string handling

genpystr$(EXE_SUFFIX):	genpystr$(OBJ_SUFFIX) pylang-host$(OBJ_SUFFIX)
			$(LDHOST) $(EXEFILE)$@ $(LDFLAGS) $^

pyallmsg.h:	$(MSGFILES) genpystr$(EXE_SUFFIX)
		./genpystr$(EXE_SUFFIX)

# ===========================================================
# Target for generating the module that contains the game array

# position/position.c is compiled both for the host and the target.
# position/position-host$(OBJ_SUFFIX) is the object file for the host.
position/position-host$(OBJ_SUFFIX):  position/position.c
		$(CCHOST) $(CFLAGS) $(COMPILEONLY) position/position.c $(OBJFILE)$@
# work around compilers that strictly derive object file name from
# source file name
		@if [ 0 -eq $(OBJFILE_WORKS) ]; then \
			mv position/position$(OBJ_SUFFIX) $@; \
		fi
# position/board.c is compiled both for the host and the target.
# position/board-host$(OBJ_SUFFIX) is the object file for the host.
position/board-host$(OBJ_SUFFIX):  position/board.c
		$(CCHOST) $(CFLAGS) $(COMPILEONLY) position/board.c $(OBJFILE)$@
# work around compilers that strictly derive object file name from
# source file name
		@if [ 0 -eq $(OBJFILE_WORKS) ]; then \
			mv position/board$(OBJ_SUFFIX) $@; \
		fi

gengmarr$(OBJ_SUFFIX):	gengmarr.c
			$(CCHOST) $(CFLAGS) \
				$(COMPILEONLY) gengmarr.c $(OBJFILE)$@

gengmarr$(EXE_SUFFIX):	gengmarr$(OBJ_SUFFIX) position/position-host$(OBJ_SUFFIX) position/board-host$(OBJ_SUFFIX)
			$(LDHOST) $(EXEFILE)$@ $(LDFLAGS) $^

pygmarr.c:	$(MSGFILES) gengmarr$(EXE_SUFFIX)
		./gengmarr$(EXE_SUFFIX) > $@


# ===========================================================

# Targets for applying code analsys tools

lint.out: $(ALLCFILES)
	lint $(LINTFLAGS) $(CFLAGS) $(ALLCFILES) > lint.out

lint: lint.out
