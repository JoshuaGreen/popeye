# This is the Makefile for py4.x, tested under Linux with GNU make.
# It is expected to work pretty portably on Unix-ish platforms with
# GNU make.

# Revision info:
# Id: problem.xsd,v 1.10 2007/06/20 12:26:07 thomasmaeder Exp $

# +++++ Warning +++++++
# This Makefile you are reading now, will not do it with:
# Microsoft C  on DOS
# Turbo C  on DOS
# TopSpeed C  on DOS
# Turbo C  on ATARI
# MPW  on Macintosh
# They are all great, but the options of the
# commands are totaly different to UNIX ones.
#	 GRRRHHH !!!
# Use instead:
# the makefile.msc file  for Microsoft C  with DOS
# the py.prj file  for TURBO C  with DOS
# the atari.prj file  for TURBO C  with ATARI
# ++++ End Warning ++++

# There are a few defines to set in CFLAGS for portablility
# 
# when you use POPEYE with Windows under DOS            -DSHARING
# when you need some DEBUGGING Information:             -DDEBUG
# when you compile with MICROSOFT's C-Compiler          -DMSC
# when you compile with Borland's TURBO-C		-D__TURBOC__
# when you compile for Windows 32-Bit environments      -DWIN32
# when you compile under DOS or OS/2 with FSF's GCC	-DGCC
# when you compile on ATARI:                            -DATARI
# when you compile on Macintosh (set by default !):     -Dmacintosh
# when you compile under MSDOS or compatibles:          -DDOS
# when you compile for Win95, Win98 or WinME            -DWIN98
# when you compile under UNIX:                          -DUNIX
# when your system is BSD instead of SYSV:		-DBSD
# when you compile under AIX				-DAIX
# when you compile under OS/2				-DOS2
# when you compile under BS2000				-DBS2000
# when your library doesn't know memset nor bset	-DNOMEMSET
# when you compile on a 16-bit machine                  -DSIXTEEN
# when you compile on a 64-bit machine                  -DSIXTYFOUR
# when you want to keep all messages in memory		-DMSG_IN_MEM
# when you compile for HP-UX 8.05 or later		-Aa -D_POSIX_SOURCE
# when you want a popeye with no output at all		-DQUIET
# when you want a message after canceling with a signal -DSIGNALS
# when you want statistic about hashtable filling	-DTESTHASH
#
# Choose the one you need/want from the above list and put them herein

#DBG= -pg
#DBG=-g
#OPT=+O4 +Oaggressive	#HP-UX
#OPT=-O4 -ansi_alias -fast -inline speed -ifo	#OS ? TLi
#OPT=-fast -Xc		#Sun Solaris
OPT=-O3 -Wall

#ARCH=-xarch=v9		# 64-Bit Solaris cc
#ARCH=-m64		# 64-Bit gcc
ARCH=

OS=`uname`
OSVER=`uname -r`
OSCPU=`uname -p`

#DEF=-DUNIX -DBSD $(OPT)
#CFLAGS= -DTIME -DBSD $(OPT)
#CFLAGS= -DDOS -DSIXTEEN -Ox -M0s -dos -i -Gs -K -W3 -CSON
#CFLAGS= -ansi -DUNIX $(OPT)
#CFLAGS= $(DBG) $(OPT) -kansi -DMSG_IN_MEM -DUNIX
#CFLAGS= $(DBG) $(OPT) -DMSG_IN_MEM -DUNIX -Aa -D_POSIX_SOURCE
#CFLAGS= $(DBG) $(OPT) $(ARCH) -DMSG_IN_MEM -DUNIX -DSIGNALS -DTESTHASH
#CFLAGS= $(DBG) $(OPT) $(ARCH) -DMSG_IN_MEM -DUNIX -DSIGNALS -DSIXTYFOUR
#CFLAGS= $(DBG) $(OPT) $(ARCH) -DMSG_IN_MEM -DUNIX -DSIGNALS
CFLAGS= $(DBG) $(OPT) $(ARCH) \
	-DMSG_IN_MEM -DUNIX -DSIGNALS \
	-DOSTYPE=\"$(OS)-$(OSVER)-$(OSCPU)\" \
        -DVERSION=$(VERSION)

#CC=gcc
#CC=clcc
CC=cc

DEPEND = cc -MM $(CFLAGS)

# Give here flags for the linker
# and add needed libraries
#LDFLAGS = -M0s -dos -i -F 2000
LDFLAGS = $(DBG) $(OPT) $(ARCH)

# Give here flags for the lint-Tool
#LINTFLAGS = -a -b -c -h -p -x -DFXF

# If you don't need (have) ranlib
RANLIB = ranlib
#RANLIB = echo ranlib

# If you don't need (have) compress
#COMPRESS = compress
COMPRESS = echo compress

#
# No problems should raise from the length of function identifiers.
# All function and procedure names are different in character
# positions one through seven.
# The other identifiers also need only a length of 7.
# Now the code of the makefile itself:

# Version numer; . separates major and minor version part
# Append "dev" while development
VERSION =       4.38dev

INCLUDES=       pydata.h py.h py1.h py4.h pyproc.h pymsg.h pymac.h     \
		pylang.h pyproof.h DHT/*.h pyint.h pyhash.h pytime.h
PYCFILES  =     pydata.c py1.c py2.c py3.c py4.c py5.c py6.c pyio.c    \
		pymsg.c pytime.c pylang.c pyhash.c pyproof.c	       \
		pysignal.c pyint.c
OBJECTS =       $(PYCFILES:%.c=%.o)
CFILES  =       $(PYCFILES) DHT/*.c
MSGFILES=       py-fran.msg py-deut.msg py-engl.msg genpystr.c
STRFILES=       py-fran.str py-deut.str py-engl.str
TEXFILES=       pie-fran.txt pie-deut.txt pie-engl.txt piecenam.txt    \
		LATEX/diagram.* LATEX/FSELCH/* LATEX/PKELCH/*
DOCFILES=       py-fran.txt py-deut.txt py-engl.txt \
		readme.txt history.txt license.txt *.mod
EXAMPLES =      BEISPIEL/*.inp EXAMPLES/*.inp
UTILS   =	todef.awk toenum.awk
DEVELOP =       makefile.unx DHT/makefile.unx coding.txt
DFILES  =       $(INCLUDES) $(CFILES) $(DEVELOP) $(DOCFILES) $(UTILS)  \
		$(MSGFILES)
MINIFILES  =    py*.[ch] py*.msg py*.txt history.txt readme.txt makefile.unx

all:		py 


# ===========================================================

# Target for creating the popeye executable with full dynamic hashing

py:		$(OBJECTS) DHT/dhtlib.a
		$(CC) -o py $(LDFLAGS) $(OBJECTS) DHT/dhtlib.a


# ===========================================================

# Target for generating source file dependencies file

depend: $(PYCFILES) $(INCLUDES)
		for f in $(PYCFILES); \
		do \
			$(DEPEND) $$f; \
		done > $@

include depend


# ===========================================================

# Target for compiling .c source files into .o object files

pyhash.o:	
		$(CC) $(CFLAGS) -DFXF -c pyhash.c 

%.o: %c
		$(CC) $(CFLAGS) -c $<

pyio:           pyio.c pydata.h py.h pydata.o pymac.h
		$(CC) -DSTANDALONE $(CFLAGS) -o pyio pydata.o pyio.c

genpystr.o:     genpystr.c
		$(CC) $(CFLAGS) -c genpystr.c


# ===========================================================

# Target for generating utilities for string handling

genpystr:       genpystr.o pylang.o
		$(CC) -o $@ $(LDFLAGS) $^

dogenpystr:	$(MSGFILES) genpystr
		./genpystr
		touch $@


# ===========================================================

# Target for generating the dynamic hash table (DHT) library

DHT/dhtlib.a:	DHT/*.c DHT/*.h
		cd DHT; $(MAKE) -f makefile.unx CC=$(CC) RANLIB="$(RANLIB)" ARCH="$(ARCH)" DBG="$(DBG)" dhtlib.a
		$(RANLIB) $@


# ===========================================================

# Target for generating the purify-ed popeye exectable

purify-py:      DHT/dhtlib.a $(OBJECTS)
		purify $(CC) -o purify-py $(LDFLAGS) $^


# ===========================================================

# Targets for cleaning up after ourselves

clean:
		rm -f *.o core
		cd DHT; $(MAKE) -f makefile.unx $@

clobber:	clean
		rm -f py genpystr dogenpystr depend $(STRFILES); cd DHT; $(MAKE) -f makefile.unx $@


# ===========================================================

# Targets for conversion between enum types and an equivalent sequence
# of #defines

todef:	
		awk -f todef.awk < py.h > py.h.def
		awk -f todef.awk < pylang.h > pylang.h.def
		awk -f todef.awk < pyhash.c > pyhash.c.def
toenum:
		awk -f toenum.awk < py.h > py.h.enum
		awk -f toenum.awk < pylang.h > pylang.h.enum
		awk -f toenum.awk < pyhash.c > pyhash.c.enum


# ===========================================================

# Target for testing on uniq id's on first seven chars choose the
# right command

TR_SYSV		= tr -cs '[0-9][A-Z]_[a-z]' '[\012*]'
TR_BSD		= tr -cs '0-9A-Z_a-z' '\012'
uniq:		
		$(CC) -E $(CFLAGS) $(CFILES) | \
		$(TR_SYSV) |\
		sort -u | tee /tmp/id.all | \
		cut -c1-7 | uniq -c | egrep -v '^ *1' > /tmp/id.mult


# ===========================================================

# Variables for repeatedly used file names

VERSIONDIR = $(VERSION)
DISTFILESTEM = popeye-$(VERSIONDIR)
SOURCESTARFILE = $(DISTFILESTEM)-sources.tar


# ===========================================================

# Target for comparing the source files of two releases and creating a
# set of patches from one to the other

/tmp/py.ptch: /tmp/py.ptch.sh
		sh -x $^ > $@

/tmp/py.ptch.sh: $(DFILES)
		for f in $^; \
		do \
			echo diff -c ../$(VERSIONDIR)/$$f $$f; \
		done > $@

cdiff: /tmp/py.ptch


# ===========================================================

# Target for creating a tar archive containing all sources and
# examples directly (without file system) on a floppy disk

# System V
DEVFLOPPY=rfd0

# Linux
#DEVFLOPPY=fd0

/tmp/$(VERSIONDIR).tar:	$(DFILES) $(TEXFILES) $(EXAMPLES)
		touch $@
		mkdir $(VERSIONDIR)
		mkdir $(VERSIONDIR)/BEISPIEL
		mkdir $(VERSIONDIR)/EXAMPLES
		mkdir $(VERSIONDIR)/DHT
		mkdir $(VERSIONDIR)/LATEX
		mkdir $(VERSIONDIR)/LATEX/FSELCH
		mkdir $(VERSIONDIR)/LATEX/PKELCH
		for i in $^ ; do  \
			ln $$i $(VERSIONDIR)/$$i ;\
		done
		tar cfv /dev/$(DEVFLOPPY) $(VERSIONDIR)
		rm -rf $(VERSIONDIR)

tardist:	/tmp/$(VERSIONDIR).tar


# ===========================================================

# Target for creating a compressed tar file containing the sources

COMPRESSDISTFILE = $(SOURCESTARFILE).Z

/tmp/$(VERSIONDIR).compress:	$(DFILES)
		touch /tmp/$(VERSIONDIR).compress

compressdist:	/tmp/$(VERSIONDIR).compress
		mkdir $(VERSIONDIR)
		mkdir $(VERSIONDIR)/DHT
		for i in $(DFILES) ; do  \
			ln $$i $(VERSIONDIR)/$$i ;\
		done
		tar cfv $(SOURCESTARFILE) $(VERSIONDIR)
		$(COMPRESS) $(SOURCESTARFILE)
		rm -rf $(VERSIONDIR)


# ===========================================================

# Target for creating a GNU zipped tar file containing the sources

GZIPDISTFILE = $(SOURCESTARFILE).gz
UUGZIPDISTFILE = $(GZIPDISTFILE).uu

$(GZIPDISTFILE): $(DFILES)
		mkdir $(VERSIONDIR)
		mkdir $(VERSIONDIR)/DHT
		for i in $^ ; do  \
			ln $$i $(VERSIONDIR)/$$i ;\
		done
		tar cfv $(SOURCESTARFILE) $(VERSIONDIR)
		gzip $(SOURCESTARFILE)
		rm -rf $(VERSIONDIR)

$(UUGZIPDISTFILE): $(GZIPDISTFILE)
		uuencode $^ $^ > $@

gzipdist:	$(GZIPDISTFILE) $(UUGZIPDISTFILE)


# ===========================================================

# Target for creating a sequence of shell archive (shar) files
# containing the complete sources and examples; each generated file
# fits on a floppy disk

/tmp/$(VERSIONDIR).shar: $(DFILES) $(TEXFILES) $(EXAMPLES)
		touch $@
		mkdir $(VERSIONDIR)
		mkdir $(VERSIONDIR)/BEISPIEL
		mkdir $(VERSIONDIR)/EXAMPLES
		mkdir $(VERSIONDIR)/DHT
		mkdir $(VERSIONDIR)/LATEX
		mkdir $(VERSIONDIR)/LATEX/FSELCH
		mkdir $(VERSIONDIR)/LATEX/PKELCH
		for i in $^ ; do  \
			ln $$i $(VERSIONDIR)/$$i ;\
		done
		find $(VERSIONDIR) -type f -print | shar -S -l40 -o/tmp/shar
		rm -rf $(VERSIONDIR)

shardist:	/tmp/$(VERSIONDIR).shar


# ===========================================================

# Target for creating a zip file containing the sources

SOURCESZIPFILE = $(DISTFILESTEM)-sources.zip

$(SOURCESZIPFILE): $(DFILES)
		mkdir $(VERSIONDIR)
		mkdir $(VERSIONDIR)/DHT
		for i in $^ ; do  \
			ln $$i $(VERSIONDIR)/$$i ;\
		done
		zip -r $(SOURCESZIPFILE) $(VERSIONDIR)
		rm -rf $(VERSIONDIR)

zipdist:	$(SOURCESZIPFILE)


# ===========================================================

# Target for creating various archive files containing the example
# input files

BEISPIELTARFILE = $(DISTFILESTEM)-beispiel.tar
BEISPIELGZIPFILE = $(BEISPIELTARFILE).gz
BEISPIELCOMPRESSFILE = $(BEISPIELTARFILE).Z
BEISPIELZIPFILE = $(DISTFILESTEM)-beispiel.zip

EXAMPLESTARFILE = $(DISTFILESTEM)-examples.tar
EXAMPLESGZIPFILE = $(EXAMPLESTARFILE).gz
EXAMPLESCOMPRESSFILE = $(EXAMPLESTARFILE).Z
EXAMPLESZIPFILE = $(DISTFILESTEM)-examples.zip

$(BEISPIELTARFILE): BEISPIEL/*.inp
		tar cf $@ $^

$(BEISPIELGZIPFILE): $(BEISPIELTARFILE)
		gzip < $^ > $@

$(BEISPIELCOMPRESSFILE): $(BEISPIELTARFILE)
		$(COMPRESS) $^

$(BEISPIELZIPFILE): BEISPIEL/*.inp
		zip -r $@ $^


$(EXAMPLESTARFILE): EXAMPLES/*.inp
		tar cf $@ $^

$(EXAMPLESGZIPFILE): $(EXAMPLESTARFILE)
		gzip < $^ > $@

$(EXAMPLESCOMPRESSFILE): $(EXAMPLESTARFILE)
		$(COMPRESS) $^

$(EXAMPLESZIPFILE): EXAMPLES/*.inp
		zip -r $@ $^

.INTERMEDIATE: $(BEISPIELTARFILE) $(EXAMPLESTARFILE)

EXAMPLESdist: $(BEISPIELGZIPFILE) $(BEISPIELCOMPRESSFILE) $(BEISPIELZIPFILE)\
	 $(EXAMPLESGZIPFILE) $(EXAMPLESCOMPRESSFILE) $(EXAMPLESZIPFILE)


# ===========================================================

# Target for creating various archive files containing the LaTeX
# utility files

LATEXTARFILE = $(DISTFILESTEM)-latex.tar
LATEXGZIPFILE = $(LATEXTARFILE).gz
LATEXCOMPRESSFILE = $(LATEXTARFILE).Z
LATEXZIPFILE = $(DISTFILESTEM)-latex.zip

$(LATEXTARFILE): $(TEXFILES)
		tar cf $@ $^

$(LATEXGZIPFILE): $(LATEXTARFILE)
		gzip < $^ > $@

$(LATEXCOMPRESSFILE): $(LATEXTARFILE)
		$(COMPRESS) $^

$(LATEXZIPFILE): $(TEXFILES)
		zip -r $@ $^

.INTERMEDIATE: $(LATEXTARFILE)

LATEXdist: $(LATEXGZIPFILE) $(LATEXCOMPRESSFILE) $(LATEXZIPFILE)


# ===========================================================

# Targets for applying code analsys tools

lint.out: $(CFILES)
	lint $(LINTFLAGS) $(CFLAGS) $(CFILES) > lint.out

lint: lint.out


# ===========================================================
#               OBSOLETE (?) TARGETS
# ===========================================================

# ===========================================================

# Target for creating a cpio archive containing all sources

/tmp/$(VERSIONDIR).cpio:	$(DFILES)
		touch $@
		mkdir $(VERSIONDIR)
		ln $^ $(VERSIONDIR)
		find $(VERSIONDIR) -print | cpio -ocv > /tmp/$(VERSIONDIR).cpio
		rm -rf $(VERSIONDIR)

cpiodist:	/tmp/$(VERSIONDIR).cpio

# ===========================================================

# Targets for creating DOS floppy disks containing the sources

dosfdist:
		@while true; do \
		echo "Insert unformatted 360K Floppy - Type return when ready\\c";\
		read answ;\
		format -f 0 -l 39 /dev/rdsk/f0d9dt;\
		dd if=/usr/lib/fdf/360 of=/dev/dsk/f0d9dt;\
		echo "Writing files ... \c";\
		MCWD=/; export MCWD;\
		mwrite -f /dev/dsk/f0d9dt $(DFILES) $(STRFILES);\
		mwrite -f /dev/dsk/f0d9dt -object tcconfig.tc py.exe;\
		echo "finished\nWriting testfiles ... \c";\
		mmd test test/py test/loe;\
		MCWD=/test/py; mwrite -f /dev/dsk/f0d9dt ../test/py/*;\
		MCWD=/test/loe; mwrite -f /dev/dsk/f0d9dt ../test/loe/*;\
		echo "finished.\nRemove Floppy";done
dosdist:
		@while true; do \
		echo "Insert formatted 360K Floppy - Type return when ready\\c";\
		read answ;\
		echo "Writing files ... \c";\
		MCWD=/; export MCWD;\
		mwrite -f /dev/dsk/f0d9dt $(DFILES);\
		mwrite -f /dev/dsk/f0d9dt -object tcconfig.tc py.exe;\
		echo "finished\nWriting testfiles ... \c";\
		mmd test test/py test/loe;\
		MCWD=/test/py; mwrite -f /dev/dsk/f0d9dt ../test/py/*;\
		MCWD=/test/loe; mwrite -f /dev/dsk/f0d9dt ../test/loe/*;\
		echo "finished.\nRemove Floppy";done

/tmp/$(VERSIONDIR).mini:	$(MINIFILES)
		touch $@
		mkdir $(VERSIONDIR)
		for i in $^ ; do  \
			ln $$i $(VERSIONDIR)/$$i ;\
		done
		tar cfv $(VERSIONDIR).tar $(VERSIONDIR)
		$(COMPRESS) $(VERSIONDIR).tar
		rm -rf $(VERSIONDIR)

minidist:	/tmp/$(VERSIONDIR).mini
