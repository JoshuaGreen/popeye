# -*- Makefile -*-
#
# This is the Makefile for py4.x, tested mainly under Linux with GNU
# make.
# It is expected to work pretty portably on Unix-ish platforms with
# GNU make.

# Revision info:
# CVS: $Id: makefile.unx,v 1.128 2010/10/09 09:11:44 thomasmaeder Exp $

# +++++ Warning +++++++

# This Makefile you are reading now, will not do it with:
# Microsoft C  on DOS
# Turbo C  on DOS
# TopSpeed C  on DOS
# Turbo C  on ATARI
# MPW  on Macintosh

# They are all great, but the options of the commands are totally
# different to UNIX ones.
# GRRRHHH !!!

# ++++ End Warning ++++


include makefile.defaults

# don't put this into the same include as makefile.defaults! 
# makefile.defaults defines TOOLCHAIN
include toolchains/$(TOOLCHAIN)/make.incl

include makefile.options

MAKEFILES = \
	makefile.defaults \
	toolchains/$(TOOLCHAIN)/make.incl \
	makefile.options \
#

# ===========================================================
# default target: build executable

default: all


# stem of distributed files
DISTFILESTEM = popeye-$(VERSION)

# name of tar file containing sources to be distributed
SOURCESTARFILE = $(DISTFILESTEM)-sources.tar

# name of directory used for creating archives (gz, zip, ...) 
# containing source files
SOURCEDISTDIR = $(VERSION)

# ===========================================================
# gzip archive of sources

GZIPDISTFILE = $(SOURCESTARFILE).gz
UUGZIPDISTFILE = $(GZIPDISTFILE).uu

gzipdist: $(GZIPDISTFILE) $(UUGZIPDISTFILE)

$(GZIPDISTFILE): ./sourcedist
	tar cfv $(SOURCESTARFILE) $(SOURCEDISTDIR)
	gzip $(SOURCESTARFILE)
	rm -rf $(SOURCEDISTDIR)

$(UUGZIPDISTFILE): $(GZIPDISTFILE)
		uuencode $^ $^ > $@


# ===========================================================
# zip archive of sources

SOURCESZIPFILE = $(DISTFILESTEM)-sources.zip

zipdist:	$(SOURCESZIPFILE)

$(SOURCESZIPFILE): ./sourcedist
	zip -r $(SOURCESZIPFILE) $(SOURCEDISTDIR)
	rm -rf $(SOURCEDISTDIR)


# ===========================================================
# .Z (compress) archive of sources

COMPRESSDISTFILE = $(SOURCESTARFILE).Z

compressdist: $(COMPRESSDISTFILE)

$(COMPRESSDISTFILE): ./sourcedist
	tar cfv $(SOURCESTARFILE) $(SOURCEDISTDIR)
	$(COMPRESS) $(SOURCESTARFILE)
	rm -rf $(SOURCEDISTDIR)

# ===========================================================
# Target for creating a tar archive containing all sources

# System V
DEVFLOPPY=/dev/rfd0

# Linux
#DEVFLOPPY=/dev/fd0

tardist:	/tmp/$(DISTFILESTEM).tar

/tmp/$(DISTFILESTEM).tar: ./sourcedist
	tar cfv $(DEVFLOPPY) $(SOURCEDISTDIR)
	rm -rf $(SOURCEDISTDIR)


# ===========================================================
# Target for creating a sequence of shell archive (shar) files
# containing the complete sources; each generated file
# fits on a floppy disk

shardist:	/tmp/$(DISTFILESTEM).shar

/tmp/$(DISTFILESTEM).shar: ./sourcedist
	find $(SOURCEDISTDIR) -type f -print | shar -S -l40 -o$@
	rm -rf $(SOURCEDISTDIR)


# ===========================================================
# Target for creating various archive files containing the example
# input files

BEISPIELTARFILE = $(DISTFILESTEM)-beispiel.tar
BEISPIELGZIPFILE = $(BEISPIELTARFILE).gz
BEISPIELCOMPRESSFILE = $(BEISPIELTARFILE).Z
BEISPIELZIPFILE = $(DISTFILESTEM)-beispiel.zip

EXAMPLESTARFILE = $(DISTFILESTEM)-examples.tar
EXAMPLESGZIPFILE = $(EXAMPLESTARFILE).gz
EXAMPLESCOMPRESSFILE = $(EXAMPLESTARFILE).Z
EXAMPLESZIPFILE = $(DISTFILESTEM)-examples.zip

$(BEISPIELTARFILE): BEISPIEL/*.inp
		tar cf $@ $^

$(BEISPIELGZIPFILE): $(BEISPIELTARFILE)
		gzip < $^ > $@

$(BEISPIELCOMPRESSFILE): $(BEISPIELTARFILE)
		$(COMPRESS) $^

$(BEISPIELZIPFILE): BEISPIEL/*.inp
		zip -r $@ $^


$(EXAMPLESTARFILE): EXAMPLES/*.inp
		tar cf $@ $^

$(EXAMPLESGZIPFILE): $(EXAMPLESTARFILE)
		gzip < $^ > $@

$(EXAMPLESCOMPRESSFILE): $(EXAMPLESTARFILE)
		$(COMPRESS) $^

$(EXAMPLESZIPFILE): EXAMPLES/*.inp
		zip -r $@ $^

.INTERMEDIATE: $(BEISPIELTARFILE) $(EXAMPLESTARFILE)

EXAMPLESdist: $(BEISPIELGZIPFILE) $(BEISPIELCOMPRESSFILE) $(BEISPIELZIPFILE)\
	 $(EXAMPLESGZIPFILE) $(EXAMPLESCOMPRESSFILE) $(EXAMPLESZIPFILE)


# ===========================================================
# Target for creating various archive files containing the LaTeX
# utility files

LATEXTARFILE = $(DISTFILESTEM)-latex.tar
LATEXGZIPFILE = $(LATEXTARFILE).gz
LATEXCOMPRESSFILE = $(LATEXTARFILE).Z
LATEXZIPFILE = $(DISTFILESTEM)-latex.zip

$(LATEXTARFILE): $(TEXFILES)
		tar cf $@ $^

$(LATEXGZIPFILE): $(LATEXTARFILE)
		gzip < $^ > $@

$(LATEXCOMPRESSFILE): $(LATEXTARFILE)
		$(COMPRESS) $^

$(LATEXZIPFILE): $(TEXFILES)
		zip -r $@ $^

.INTERMEDIATE: $(LATEXTARFILE)

LATEXdist: $(LATEXGZIPFILE) $(LATEXCOMPRESSFILE) $(LATEXZIPFILE)

PLATFORMS =     platform/other platform/windows32 platform/dos \
		platform/unix platform/windows64

NESTEDSRCDIRS = . platform $(PLATFORMS) $(TOOLCHAINS) scripts \
		DHT conditions conditions/amu conditions/ultraschachzwang \
		conditions/circe conditions/anticirce \
		stipulation stipulation/operators \
		stipulation/battle_play \
		stipulation/help_play stipulation/series_play \
		stipulation/goals \
    stipulation/goals/mate \
    stipulation/goals/stalemate stipulation/goals/doublestalemate \
    stipulation/goals/autostalemate \
    stipulation/goals/target stipulation/goals/check \
    stipulation/goals/doublemate stipulation/goals/countermate \
    stipulation/goals/capture stipulation/goals/steingewinn \
    stipulation/goals/enpassant stipulation/goals/castling \
		pieces/attributes/paralysing pieces/attributes/kamikaze \
		optimisations/orthodox_mating_moves optimisations/intelligent \
		optimisations/maxtime optimisations/maxsolutions \
		optimisations/stoponshortsolutions \
		optimisations/goals \
		optimisations/goals/castling optimisations/goals/enpassant \
		optimisations/killer_move \
		options/no_short_variations \
		output/plaintext output/plaintext/tree output/plaintext/line

NESTEDLIBDIRS = . DHT \
		conditions conditions/amu conditions/ultraschachzwang \
		conditions/circe conditions/anticirce \
		stipulation stipulation/operators \
		stipulation/battle_play \
		stipulation/help_play stipulation/series_play \
		stipulation/goals \
    stipulation/goals/mate \
    stipulation/goals/stalemate stipulation/goals/doublestalemate \
    stipulation/goals/autostalemate \
    stipulation/goals/target stipulation/goals/check \
    stipulation/goals/doublemate stipulation/goals/countermate \
    stipulation/goals/capture stipulation/goals/steingewinn \
    stipulation/goals/enpassant stipulation/goals/castling \
		pieces/attributes/paralysing pieces/attributes/kamikaze \
		optimisations/orthodox_mating_moves optimisations/intelligent \
		optimisations/maxtime optimisations/maxsolutions \
		optimisations/stoponshortsolutions \
		optimisations/goals \
		optimisations/goals/castling optimisations/goals/enpassant \
		optimisations/killer_move \
		options/no_short_variations \
		output/plaintext output/plaintext/tree output/plaintext/line \
		platform platform/$(PLATFORM)

STRFILES=       py-fran.str py-deut.str py-engl.str
TEXFILES=       pie-fran.txt pie-deut.txt pie-engl.txt piecenam.txt    \
		LATEX/diagram.* LATEX/FSELCH/* LATEX/PKELCH/*
EXAMPLES =      BEISPIEL/*.inp EXAMPLES/*.inp
TOOLCHAINS =    $(filter-out toolchains/CVS,$(wildcard toolchains/*))

# enumerate libraries to link
OURLIBS = $(NESTEDLIBDIRS:%=%/library.$(LIB_SUFFIX))

# ===========================================================
# default target: build executable

all:		py$(EXE_PLATFORM_MARK)$(EXE_SUFFIX)

# ===========================================================
# Target for creating the popeye executable with full dynamic hashing

py$(EXE_PLATFORM_MARK)$(EXE_SUFFIX): pymain$(OBJ_SUFFIX) $(OURLIBS)
		$(LDTARGET) $(EXEFILE)$@ pymain$(OBJ_SUFFIX) $(OBJECTS) $(OURLIBS) $(LDFLAGS) $(TARGETLIBS) $(LIBRARIES)
		$(STRIPTARGET) $@

# ===========================================================
# Target for generating the purify-ed popeye exectable
# TODO does this still work?

purify-py:      $(OBJECTS) $(OURLIBS)
		purify $(CCTARGET) -o purify-py $(LDFLAGS) $^


# ===========================================================
# targets built using recursive makes
# ===========================================================

./sourcedist: FORCE
	$(MAKE) CURRPWD=./ -f makefile.local $@


# ===========================================================
# Build dependency information

ifdef DEPEND
depend: $(NESTEDLIBDIRS:%=%/nesteddepend)

$(NESTEDLIBDIRS:%=%/nesteddepend): FORCE
	$(MAKE) CURRPWD=$(dir $@) -f $(dir $@)makefile.local depend
endif

# ===========================================================
# Build in a nested directory

%$(OBJ_SUFFIX) %$(LIB_SUFFIX) %/clean: FORCE
	$(MAKE) CURRPWD=$(dir $@) -f $(dir $@)makefile.local $@


# ===========================================================
# create hard links to files to be distributed

sourcedist: $(NESTEDSRCDIRS:%=%/nestedsourcedist)

$(NESTEDSRCDIRS:%=%/nestedsourcedist): FORCE
	$(MAKE) CURRPWD=$(dir $@) -f $(dir $@)makefile.local sourcedist


# ===========================================================
# clean up after ourselves

clean:	$(NESTEDLIBDIRS:%=%/clean)
	$(MAKE) CURRPWD=./ -f makefile.local $@
	rm -f pymain$(OBJ_SUFFIX)

clobber:	clean
		rm -f py$(EXE_SUFFIX) genpystr$(EXE_SUFFIX) gengmarr$(EXE_SUFFIX) $(STRFILES)

FORCE:

.SUFFIXES:
