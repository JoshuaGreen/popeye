                         C/C++-COMPILEROPTIONEN


                              -OPTIMIERUNG-

/O1 Speicherplatz minimieren            /O2 Geschwindigkeit optimieren
/Ob<n> Inlineerweiterung (Standard: n=0)
/Od Optimierungen deaktivieren (Standard)
/Og Globale Optimierung aktivieren      
/Oi[-] Systeminterne Funktionen aktivieren
/Os Codespeicherplatz vorrangig         /Ot Codegeschwindigkeit vorrangig
/Ox Maximale Optimierungen              
/Oy[-] Unterdrücken von Framezeigern aktivieren 
/favor:<blend|ATOM> Prozessor zur Optimierung auf eines der folgenden Elemente auswählen:
    blend - eine Kombination aus Optimierungen für unterschiedliche x86-Prozessoren
    ATOM - Intel(R) Atom(TM)-Prozessoren

                             -CODEGENERIERUNG-

/GF Schreibgeschütztes Stringpooling aktivieren
/Gm[-] Minimale Neuerstellung aktivieren/Gy[-] Separate Funktionen für Linker
/GS[-] Sicherheitsüberprüfungen aktivieren
/GR[-] C++-RTTI aktivieren              
/GX[-] C++-EH aktivieren (identisch mit /EHsc)
/EHs C++-EH aktivieren (ohne SEH-Ausnahmen)
/EHa C++-EH aktivieren (mit SEH-Ausnahmen)
/EHc nothrow als Standard für externes "C"
/fp:<except[-]|fast|precise|strict> Gleitkommamodell wählen:
    except[-] -Gleitkommaausnahmen beim Generieren von Code berücksichtigen
    fast - fast-Gleitkommamodell; Ergebnisse sind weniger vorhersehbar.
    precise - precise-Gleitkommamodell; Ergebnisse sind vorhersehbar.
    strict - strict-Gleitkommamodell (impliziert /fp:except)
/Qfast_transcendentals generieren auch bei /fp:expect systeminterne Inline-FP.
/Qpar[-] parallele Codegenerierung aktivieren
/Qpar-report:1 automatische Parallelisierungsdiagnose; parallelisierte Schleifen anzeigen
/Qpar-report:2 automatische Parallelisierungsdiagnose; nicht parallelisierte Schleifen anzeigen
/Qpar-report:1 automatische Vektorisierungsdiagnose; vektorisierte Schleifen anzeigen
/Qpar-report:2 automatische Vektorisierungsdiagnose; nicht vektorisierte Schleifen anzeigen
/GL[-] Link-Zeitcodegenerierung aktivieren
/volatile:<iso|ms> flüchtiges Modell auswählen:
    iso - Acquire-/release-Semantik bei flüchtigen Zugriffen nicht garantiert
    ms  - Acquire-/release-Semantik bei flüchtigen Zugriffen garantiert
/GA Für Windows-Anwendung optimieren    
/Ge Stapelüberprüfung für alle Funktionen erzwingen
/Gs[num] Stapelüberprüfungsaufrufe kontrollieren
/Gh _penter-Funktionsaufruf aktivieren  /GH _pexit-Funktionsaufruf aktivieren
/GT Fiber-sichere TLS-Zugriffe generieren
/RTC1 Schnelle Überprüfungen aktivieren (/RTCsu)
/RTCc Konvertierung für kleinere Typenüberprüfungen
/RTCs Stapelrahmen-Laufzeitüberprüfung  
/RTCu Nicht initialisierte lokale Syntaxüberprüfungen
/clr[:Option] Für Common Language Runtime kompilieren; zulässige Optionen sind:
    pure - Reine IL-Ausgabedatei erzeugen (kein systemeigener ausführbarer Code)
    safe - Reine, überprüfbare IL-Ausgabedatei erzeugen
    oldSyntax - Managed Extensions-Syntax aus Visual C++ 2002/2003 akzeptieren
    initialAppDomain - Ursprüngliches AppDomain-Verhalten von Visual C++ 2002 aktivieren
    noAssembly - Keine Assembly erzeugen
    nostdlib - das \clr-Standardverzeichnis ignorieren
/Gd __cdecl-Aufrufkonvention            /Gr __fastcall-Aufrufkonvention
/Gz __stdcall-Aufrufkonvention          
/GZ Stapelüberprüfungen aktivieren (/RTCs)
/QIfist[-] FIST anstelle von ftol() verwenden
/hotpatch Funktionsabstand für hotpatchfähige Images gewährleisten
/arch:<IA32|SSE|SSE2|AVX> Mindestanforderungen an die CPU-Architektur. Mögliche Werte:
   IA32 - Keine erweiterten Anweisungen verwenden und x87 als Gleitkomma verwenden
   SSE - Verwendung der für SSE-fähige CPUs verfügbaren Anweisungen aktivieren
   SSE2 - (Standard) Verwendung der für SSE2-fähige CPUs verfügbaren Anweisungen aktivieren
   AVX - Verwendung von Intel(R) Advanced Vector Extensions-Anweisungen aktivieren
/Qimprecise_fwaits generiert FWAITs nur bei "try"-Grenze, nicht innerhalb von "try".
/Qsafe_fp_loads generiert sichere FP-Ladungen.

                              -AUSGABEDATEIEN-

/Fa[Datei] Name der Assemblylistendatei /FA[scu] Assemblyliste konfigurieren
/Fd[Datei] Name der PDB-Datei           /Fe<Datei> Name der ausführbaren Datei
/Fm[Datei] Name der Zuordnungsdatei     /Fo<Datei> Name der Objektdatei
/Fp<Datei> Name der vorkompilierten Headerdatei
/Fr[Datei] Name der Quellbrowserdatei   
/FR[Datei ] Name der erweiterten SBR-Datei
/Fi[file] Vorverarbeitete Datei benennen
/doc[Datei] XML-Dokumentationskommentare verarbeiten und optional die XDC-Datei benennen

                              -PRÄPROZESSOR-

/AI<Verz> Zu Assemblysuchpfad hinzufügen
/FU<Datei> Assembly/Modul, deren/dessen Verwendung erzwungen wird 
/C Kommentare nicht entfernen           /D<Name>{=|#}<Text> Makro definieren
/E In stdout vorverarbeiten             /EP In stdout vorverarbeiten, kein #line
/P In Datei vorverarbeiten              
/Fx Eingefügten Code in Datei zusammenführen
/FI<Datei> Name der Datei, deren Einschluss erzwungen wird
/U<Name> Vordefiniertes Makro entfernen /u Alle vordefinierten Makros entfernen
/I<Verz> Zu Include-Suchpfad hinzufügen /X Standardspeicherorte ignorieren

                                -PROGRAMMIERSPRACHE-

/Zi Debuginformationen aktivieren       /Z7 Debuginformationen (alt) aktivieren
/Zp[n] Strukturen an n-Byte-Grenze packen
/Za Erweiterungen deaktivieren          /Ze Erweiterungen aktivieren (Standard)
/Zl Kein Standardbibliotheksname in OBJ-Datei
/Zg Funktionsprototypen generieren      /Zs Nur Syntaxüberprüfung
/vd{0|1|2} vtordisp deaktivieren/aktivieren
/vm<x> Typ von Memberzeigern            
/Zc:arg1[,arg2] C++-Sprachübereinstimmung; folgende Argumente sind zulässig:
    forScope[-] - Standard-C++ für Bereichsregeln erzwingen
    wchar_t[-] - wchar_t ist der systemeigene Typ, nicht typedef
    auto[-] - Neue Standard C++-Bedeutung für "auto" erzwingen
    trigraphs[-] - Trigraphen aktivieren (standardmäßig deaktiviert)
/ZW WinRT-Spracherweiterungen aktivieren
/ZI Debuginformationen für Bearbeiten und Fortfahren aktivieren
/openmp OpenMP 2.0-Spracherweiterungen aktivieren

                              -VERSCHIEDENES-

@<Datei> Optionsantwortdatei            /?, /help Diese Hilfemeldung anzeigen
/bigobj Erweitertes Objektformat generieren
/c Nur kompilieren, nicht verknüpfen    
/errorReport:Option Interne Compilerfehler an Microsoft melden
    none - Keinen Bericht senden                
    prompt - Zum sofortigen Senden des Berichts auffordern
    queue - Bei nächster Administratoranmeldung zum Senden des Berichts auffordern (Standard)
    send - Bericht automatisch senden         
/FC Bei Diagnose volle Pfadnamen verwenden
/H<num> Maximale Länge externer Namen   /J Standardzeichentyp ist "unsigned"
"/MP[n]" verwendet für die Kompilierung bis zu "n" Prozesse.
/nologo Copyright-Meldung unterdrücken  
/sdl zusätzliche Sicherheitsfeatures und Warnungen aktivieren
/showIncludes Includedateinamen anzeigen
/Tc<Quelldatei> Datei als .c-Datei kompilieren
/Tp<Quelldatei> Datei als .cpp-Datei kompilieren
/TC Alle Dateien als .c-Datei kompilieren
/TP Alle Dateien als .cpp-Datei kompilieren
/V<Zeichenfolge> Versionszeichenfolge festlegen
/w Alle Warnungen deaktivieren          /wd<n> Warnung n deaktivieren
/we<n> Warnung n als Fehler behandeln   /wo<n> Warnung n einmal ausgeben
/w<l><n> Warnstufe 1-4 für n festlegen  
/W<n> Warnstufe festlegen (Standard: n=1)
/Wall Alle Warnungen deaktivieren       /WL Einzeilige Diagnose aktivieren
/WX Warnungen als Fehler behandeln      /Yc[Datei] PCH-Datei erstellen
/Yd Debuginformationen in jeder OBJ-Datei ablegen
/Yl[sym] PCH-Verweis für Debugbibliothek einfügen
/Yu[Datei] PCH-Datei verwenden          /Y- Alle PCH-Optionen deaktivieren
/Zm<n> Maximale Speicherzuweisung (% vom Standard)
/Wp64 64-Bit-Portierungswarnungen aktivieren

                                -VERKNÜPFEN-

/LD .DLL erstellen                      /LDd .DLL-Debugbibliothek erstellen
/LN NETMODULE erstellen                 /F<num> Stapelgröße festlegen
/link [Linkeroptionen und -bibliotheken]/MD Mit "MSVCRT.LIB" verknüpfen
/MT Mit "LIBCMT.LIB" verknüpfen         
/MDd Mit Debugbibliothek "MSVCRTD.LIB" verknüpfen
/MTd Mit Debugbibliothek "LIBCMTD.LIB" verknüpfen

                         -CODEANALYSE-

/analyze[:WX-] Codeanalyse aktivieren   
    WX- - Codeanalysewarnungen sollten nicht als Fehler behandelt werden, wenn /WX aufgerufen wird.

