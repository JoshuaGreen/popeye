# -*- Makefile -*-
#

# This file contains make rules valid in all source directories

CFILES = $(SRC_CFILES) $(GENERATED_CFILES)

# derive object files from C files
OBJECTS = $(CFILES:%.c=$(CURRPWD)%$(OBJ_SUFFIX))

# files to be included in distributed archives
DISTRIBUTEDFILES = $(CFILES) $(INCLUDES) depend makefile.*

# produce an object file from a C file
$(CURRPWD)%$(OBJ_SUFFIX):	$(CURRPWD)%.c
	$(CCTARGET) $(CFLAGS) $(COMPILEONLY) $< $(OBJFILE)$@
# work around compilers that blindly put objects in the current
# directory
	@if [ 0 -eq $(OBJFILE_WORKS) -a $(notdir $@) != $@ ]; then \
		mv -f $(notdir $@) $@; \
	fi

# produce a library form the object files in the current directory
$(CURRPWD)library.$(LIB_SUFFIX): $(OBJECTS) $(CURRPWD)makefile.local
	$(ARCHIVER) $(ARCHIVERFLAGS) $(LIBFILE)$@ $(OBJECTS)
	$(ARCHIVE_INDEXER) $@

# clean up after ourselves
clean:	$(NESTED:%=%/clean)
	rm -f $(OBJECTS) $(HOSTFILES) $(CURRPWD)library.$(LIB_SUFFIX) $(CURRPWD)core $(CURRPWD)*~

# clean up after ourselves in a nested directory
%/clean: FORCE
	$(MAKE) CURRPWD=$(dir $@) -f $(dir $@)makefile.local clean

# generate source file dependencies file
depend:

ifdef DEPEND
$(CURRPWD)depend: $(SRC_CFILES:%=$(CURRPWD)%) $(INCLUDES:%=$(CURRPWD)%) $(CURRPWD)makefile.local
	touch $@
	chmod u+w $@
	-for f in $(SRC_CFILES:%=$(CURRPWD)%); \
	do \
		$(MAKEDEPEND) \
			-MG -MT `echo $$f | sed -e "s/[.]c$$/$(OBJ_SUFFIX)/"` \
			$$f \
		| sed -e "s/[.]o:/\$$(OBJ_SUFFIX):/"; \
	done > $@
endif

VERSIONDIR = $(VERSION)/$(CURRPWD)

$(CURRPWD)sourcedist: FORCE $(VERSIONDIR)
	ln $(DISTRIBUTEDFILES:%=$(CURRPWD)%) $(VERSIONDIR)

$(VERSIONDIR):
	mkdir -p $(VERSIONDIR)

FORCE:
